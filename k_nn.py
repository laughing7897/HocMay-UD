# -*- coding: utf-8 -*-
"""K-NN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zFHhYlbtR2UmeT1IrUrcTx8UD_GKyKMu
"""

#3.1: Nạp thư viện
import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd

#3.2: Nạp dữ liệu
#import datasets
data_set = pd.read_csv('/content/User_Data.csv')
print(data_set.head())

#Extracting Independent and dependent Variable
x = data_set.iloc[:,[2,3]].values
y = data_set.iloc[:,4].values
#Splitting the dataset into training and test set.
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size= 0.25, random_state=0)
print(x_train.shape)
print(y_train.shape)

#3.3: Feature Scaling
from sklearn.preprocessing import StandardScaler
st_x = StandardScaler()
x_train = st_x.fit_transform(x_train)
x_test = st_x.transform(x_test)

#3.4: Huấn luyện lớp KNN
#Fitting K-NN classifier to the training set
# n_neighbor: to define the required neighbors of the algorithm. Usually, it takes 5.
# metric = 'minkowski': This is the default parameter and it decides the distance between the points.
# p = 2: It is equivalent to the standard Euclidean metric
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)
classifier.fit(x_train, y_train)

#3.5:Dự báo data mới với K-NN
#Predicting the test set result
y_pred = classifier.predict(x_test)

#3.6: Tạo Confusion matrix
#Creating the Confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

#3.7: Trực quan hóa K-NN trên bộ train
from matplotlib.colors import ListedColormap
x_set, y_set = x_train, y_train
x1,x2 = nm.meshgrid(nm.arange(start = x_set[:,0].min() - 1, stop = x_set[:,0].max() + 1, step =0.01),
                    nm.arange(start = x_set[:,1].min() - 1, stop = x_set[:,1].max() + 1, step =0.01))
mtp.contourf(x1,x2, classifier.predict(nm.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('red','green')))
mtp.xlim(x1.min(), x1.max())
mtp.ylim(x2.min(), x2.max())
for i,j in enumerate(nm.unique(y_set)):
  mtp.scatter(x_set[y_set == j,0], x_set[y_set == j,1],
              c = ListedColormap(('red','green'))(i),label=j)
mtp.title('K-NN Algorithm (Training set)')
mtp.xlabel('Age')
mtp.ylabel('Estimated Salary')
mtp.legend()
mtp.show()

#3.8: Trực quan hóa K-NN trên bộ test
from matplotlib.colors import ListedColormap
x_set, y_set = x_test, y_test
x1,x2 = nm.meshgrid(nm.arange(start = x_set[:,0].min() - 1, stop = x_set[:,0].max() + 1, step =0.01),
                    nm.arange(start = x_set[:,1].min() - 1, stop = x_set[:,1].max() + 1, step =0.01))
mtp.contourf(x1,x2, classifier.predict(nm.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),
             alpha = 0.75, cmap = ListedColormap(('red','green')))
mtp.xlim(x1.min(), x1.max())
mtp.ylim(x2.min(), x2.max())
for i,j in enumerate(nm.unique(y_set)):
  mtp.scatter(x_set[y_set == j,0], x_set[y_set == j,1],
              c = ListedColormap(('red','green'))(i),label=j)
mtp.title('K-NN Algorithm (Test set)')
mtp.xlabel('Age')
mtp.ylabel('Estimated Salary')
mtp.legend()
mtp.show()